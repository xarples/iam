// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Permission {
  id          String   @id @default(cuid())
  role_id     String?
  project_id  String?
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Project Project? @relation(fields: [project_id], references: [id])
  Roles   Role[]

  @@map(name: "permissions")
}

model Project {
  id          String   @id @default(cuid())
  user_id     String?
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  UserRoles    UserRole[]
  Roles        Role[]
  Permissions  Permission[]
  UserProjects UserProject[]

  @@map(name: "projects")
}

model Role {
  id          String   @id @default(cuid())
  project_id  String?
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Project     Project?     @relation(fields: [project_id], references: [id])
  Permissions Permission[]
  UserRoles   UserRole[]


  @@map(name: "roles")
}

model UserProject {
  id         String   @id @default(cuid())
  user_id    String?
  project_id String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Project Project? @relation(fields: [project_id], references: [id])

  @@map(name: "user_projects")
}

model UserRole {
  id         String   @id @default(cuid())
  user_id    String?
  role_id    String?
  project_id String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Project Project? @relation(fields: [project_id], references: [id])
  Role    Role?    @relation(fields: [role_id], references: [id])

  @@map(name: "user_roles")
}
